// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PackagingProduct {
  BRIK
  BLIK
  DOOS
  FLES
  ZAK
  POTJE
  VLOOTJE
}

enum UnitProduct {
  ML
  CL
  DL
  L
  MG
  G
  KG
}

enum UnitRecipe {
  ML
  CL
  DL
  L
  MG
  G
  KG
  CUP
  TBSP
  TSP
}

model User {
  id                    String                 @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String                 @unique @db.VarChar(255)
  password              String
  firstName             String
  lastName              String
  sessions              Session[]
  role                  Role
  userFavouriteProducts UserFavouriteProduct[]
  userFavouriteRecipes  UserFavouriteRecipe[]
  groupId               String                 @db.Uuid
  group                 Group                  @relation(fields: [groupId], references: [id])
}

model Group {
  id            String         @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  inviteCode    String         @unique
  createdAt     DateTime?      @default(now())
  products      Product[]
  recipes       Recipe[]
  categories    Category[]
  shoppinglists Shoppinglist[]
  users         User[]
}

model Product {
  id                    String                 @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  brand                 String
  numberOfItems         Int
  volumeContent         Int?
  packagingProduct      PackagingProduct?
  unitProduct           UnitProduct?
  purchaseDate          DateTime?
  expiryDate            DateTime?
  needsRestock          Boolean?
  restockThreshold      Int?
  isOpen                Boolean?               @default(false)
  categories            Category[]
  shoppinglistProducts  ShoppinglistProduct[]
  ingredients           Ingredient[]
  productEntries        ProductEntry[]
  userFavouriteProducts UserFavouriteProduct[]
  group                 Group                  @relation(fields: [groupId], references: [id])
  groupId               String                 @db.Uuid
}

model Category {
  id       String    @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  products Product[]
  group    Group     @relation(fields: [groupId], references: [id])
  groupId  String    @db.Uuid

  @@unique([groupId, name])
}

model Shoppinglist {
  id                   String                @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  shoppinglistProducts ShoppinglistProduct[]
  group                Group?                @relation(fields: [groupId], references: [id])
  groupId              String?               @db.Uuid
}

model ShoppinglistProduct {
  shoppinglist   Shoppinglist @relation(fields: [shoppinglistId], references: [id], onDelete: Cascade)
  shoppinglistId String       @db.Uuid
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String       @db.Uuid
  quantity       Int          @default(1)

  @@id([shoppinglistId, productId])
}

model Recipe {
  id                   String                @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  instructions         String?
  ingredients          Ingredient[]
  userFavouriteRecipes UserFavouriteRecipe[]
  group                Group?                @relation(fields: [groupId], references: [id])
  groupId              String?               @db.Uuid
}

model Ingredient {
  id         String     @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount     Int
  unitRecipe UnitRecipe
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String     @db.Uuid
  recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId   String     @db.Uuid

  @@unique([productId, recipeId])
}

model ProductEntry {
  id           String    @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  purchaseDate DateTime? @default(now())
  expiryDate   DateTime?
  quantity     Int       @default(1)
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String    @db.Uuid

  @@index([productId])
}

model UserFavouriteProduct {
  id        String  @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String  @db.Uuid
  user      User    @relation(fields: [userId], references: [id])
  productId String  @db.Uuid
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model UserFavouriteRecipe {
  id       String @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId   String @db.Uuid
  user     User   @relation(fields: [userId], references: [id])
  recipeId String @db.Uuid
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@unique([userId, recipeId])
}

model Session {
  id          String   @id @unique @db.VarChar()
  activeFrom  DateTime @default(now())
  activeUntil DateTime @default(dbgenerated("CURRENT_TIMESTAMP + interval '1 day'"))
  userId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
